name: Auto Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  auto-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Run Tests
        run: go test -race -coverprofile=coverage.out ./...

      # - name: Verify Coverage
      #   run: |
      #     COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
      #     echo "Cobertura total: $COVERAGE"
      #     # Falhar se a cobertura for menor que 75%
      #     PERCENTAGE=$(echo $COVERAGE | sed 's/%//')
      #     if (( $(echo "$PERCENTAGE < 75" | bc -l) )); then
      #       echo "Cobertura de testes insuficiente: $COVERAGE"
      #       exit 1
      #     fi

      - name: Generate Release Type
        id: release-type
        run: |
          # Busca o último commit que não é de merge (para evitar commits de PR)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          if [[ $COMMIT_MESSAGE == feat\(major\)* ]] || [[ $COMMIT_MESSAGE == *"BREAKING CHANGE"* ]]; then
            echo "RELEASE_TYPE=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MESSAGE == feat* ]]; then
            echo "RELEASE_TYPE=minor" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_TYPE=patch" >> $GITHUB_OUTPUT
          fi
          
          # Extrai o changelog a partir dos commits recentes
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD | grep -v "Merge ")
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate New Version
        id: next-version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Remove o 'v' do começo da tag
          VERSION=${LATEST_TAG#v}
          
          # Separa os componentes da versão
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Incrementa a versão com base no tipo
          RELEASE_TYPE="${{ steps.release-type.outputs.RELEASE_TYPE }}"
          if [[ $RELEASE_TYPE == "major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [[ $RELEASE_TYPE == "minor" ]]; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.next-version.outputs.NEW_VERSION }}
          CHANGELOG="${{ steps.release-type.outputs.CHANGELOG }}"
          
          # Verifica se a tag já existe
          if git rev-parse $NEW_VERSION >/dev/null 2>&1; then
            echo "A tag $NEW_VERSION já existe. Pulando criação de release."
            exit 0
          fi
          
          # Cria a tag localmente
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

          $CHANGELOG"
          
          # Envia a tag para o repositório
          git push origin "$NEW_VERSION"
          
          # Cria a release no GitHub
          gh release create "$NEW_VERSION" \
            --title "Release $NEW_VERSION" \
            --notes "$CHANGELOG" \
            --generate-notes
